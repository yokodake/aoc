
==================== FINAL INTERFACE ====================
2018-06-17 11:25:52.838735229 UTC

interface main:Main [family instance module] 8022
  interface hash: 7f2d32746d158ed8dc5259b01e248f8a
  ABI hash: 96b404fef85c64b1ab7cfac71dd0e39c
  export-list hash: fbecab14d471c713bbed9da44c0d20ef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bc29b1badf6219c61ec0c151b9707ca9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cstdiv
  Main.for
  Main.fst3
  Main.judge
  Main.l16bits
  Main.main
  Main.next
  Main.nexta
  Main.nextb
  Main.run1
  Main.run2
  Main.starta
  Main.startb
  Main.test
  Main.testa
  Main.testb
  Main.Nint{Main.Nint}
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Generics c2a8006cab1f0055555a6c72607a574b
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Numeric 21156732c42fc141a3fb4d889dca2ac6
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  deepseq-1.4.3.0:Control.DeepSeq 3eddc770eed9d0b92969adb25629e638
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
8c13cd8bb11227163f3bcbb2eeef71fc
  $fEqNint :: GHC.Classes.Eq Main.Nint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Nint Main.$fEqNint_$c== Main.$fEqNint_$c/= -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fEqNint_$c/= :: Main.Nint -> Main.Nint -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.Nint) (y :: Main.Nint) ->
                 case GHC.Base.eqString
                        (Main.l16bits x `cast` (Main.N:Nint[0]))
                        (Main.l16bits y `cast` (Main.N:Nint[0])) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fEqNint_$c== :: Main.Nint -> Main.Nint -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Nint) (ds1 :: Main.Nint) ->
                 GHC.Base.eqString
                   (Main.l16bits ds `cast` (Main.N:Nint[0]))
                   (Main.l16bits ds1 `cast` (Main.N:Nint[0]))) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fGenericNint :: GHC.Generics.Generic Main.Nint
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Nint
                  Main.$fGenericNint2
                    `cast`
                  (forall (x :: <*>_N).
                   <Main.Nint>_R
                   ->_R Trans
                            (Main.N:Nint[0])
                            (Trans
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <GHC.Integer.Type.Integer>_R
                                           <x>_P))
                                 (Trans
                                      (Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R GHC.Integer.Type.Integer>_R))
                                      (Trans
                                           (Sym (GHC.Generics.N:M1[0]
                                                     <*>_N
                                                     <GHC.Generics.C>_P
                                                     <'GHC.Generics.MetaCons
                                                        "Nint"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False>_P
                                                     <GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Base.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           GHC.Integer.Type.Integer)>_R))
                                           (Trans
                                                (Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.D>_P
                                                          <'GHC.Generics.MetaData
                                                             "Nint" "Main" "main" 'GHC.Types.True>_P
                                                          <GHC.Generics.M1
                                                             GHC.Generics.C
                                                             ('GHC.Generics.MetaCons
                                                                "Nint"
                                                                'GHC.Generics.PrefixI
                                                                'GHC.Types.False)
                                                             (GHC.Generics.M1
                                                                GHC.Generics.S
                                                                ('GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy)
                                                                (GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   GHC.Integer.Type.Integer))>_R))
                                                (Sub (Sym (Main.Rep_Nint[0]))))) <x>_N)))
                  Main.$fGenericNint1
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep Main.Nint x>_R
                   ->_R Trans
                            (Trans
                                 (Sub (Main.Rep_Nint[0]))
                                 (Trans
                                      (GHC.Generics.N:M1[0]
                                           <*>_N
                                           <GHC.Generics.D>_P
                                           <'GHC.Generics.MetaData
                                              "Nint" "Main" "main" 'GHC.Types.True>_P
                                           <GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "Nint" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R GHC.Integer.Type.Integer))>_R)
                                      (Trans
                                           (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.C>_P
                                                <'GHC.Generics.MetaCons
                                                   "Nint" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R GHC.Integer.Type.Integer)>_R)
                                           (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   GHC.Integer.Type.Integer>_R))) <x>_N)
                            (Trans
                                 (GHC.Generics.N:K1[0]
                                      <*>_N <GHC.Generics.R>_P <GHC.Integer.Type.Integer>_R <x>_P)
                                 (Sym (Main.N:Nint[0])))) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fGenericNint1 ::
    GHC.Generics.Rep Main.Nint x -> GHC.Generics.Rep Main.Nint x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (ds :: GHC.Generics.Rep Main.Nint x) -> ds) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fGenericNint2 :: Main.Nint -> Main.Nint
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (x1 :: Main.Nint) -> x1) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fNFDataNint :: Control.DeepSeq.NFData Main.Nint
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fNFDataNint_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Main.Nint>_N)) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fNFDataNint_$crnf :: Main.Nint -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Nint) ->
                 case x `cast` (Main.N:Nint[0]) of ds1 { DEFAULT ->
                 GHC.Tuple.() }) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fOrdNint :: GHC.Classes.Ord Main.Nint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Nint
                  Main.$fEqNint
                  GHC.Integer.Type.compareInteger
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Integer.Type.ltInteger
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.leInteger
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.gtInteger
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.geInteger
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.$fOrdInteger_$cmax
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0]))
                  GHC.Integer.Type.$fOrdInteger_$cmin
                    `cast`
                  (Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])
                   ->_R Sym (Main.N:Nint[0])) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fShowNint :: GHC.Show.Show Main.Nint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Nint
                  Main.$fShowNint_$cshowsPrec
                  Main.$fShowNint_$cshow
                  Main.$fShowNint_$cshowList -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fShowNint1 :: Main.Nint -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (w :: Main.Nint) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
4771c8ed4411a0947d10d899e7a7c264
  $fShowNint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nint "#) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fShowNint_$cshow :: Main.Nint -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: Main.Nint) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowNint2
                   (case GHC.Show.$w$cshowsPrec4
                           11#
                           x `cast` (Main.N:Nint[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Types.: @ GHC.Types.Char ww3 ww4 })) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fShowNint_$cshowList :: [Main.Nint] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Nint Main.$fShowNint1) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $fShowNint_$cshowsPrec ::
    GHC.Types.Int -> Main.Nint -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Nint)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
0a55b6115842aae1ba8f4a5282def439
  $tc'Nint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15322468618518777669##
                   5386749930246002442##
                   Main.$trModule
                   Main.$tc'Nint2
                   0#
                   Main.$tc'Nint1) -}
ad5213d3214a9e3c9de8c4c69762b729
  $tc'Nint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
04df4173bf14062a9675625860934adf
  $tc'Nint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Nint3) -}
5383998d3e4a43c1740aa052fc97cd02
  $tc'Nint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Nint"#) -}
5d6a7f5f377803da071edc0116a596f4
  $tcNint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7494597963199113196##
                   9844101206141735341##
                   Main.$trModule
                   Main.$tcNint1
                   0#
                   GHC.Types.krep$*) -}
9d1ca36fe8374663c06713aa10576b50
  $tcNint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcNint2) -}
19888cbfb8f2e33f236d086485b0bb52
  $tcNint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nint"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8c13cd8bb11227163f3bcbb2eeef71fc
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Nint -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.Nint)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowNint2
                        (case GHC.Show.$w$cshowsPrec4
                                11#
                                w `cast` (Main.N:Nint[0])
                                w1 of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowNint2
                           (case GHC.Show.$w$cshowsPrec4
                                   11#
                                   w `cast` (Main.N:Nint[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      w1) of ww2 { (#,#) ww3 ww4 ->
                            GHC.Types.: @ GHC.Types.Char ww3 ww4 })) }) -}
ab7484db221b52cfc715109d3a23fbb8
  $w$sfor ::
    ((GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
     -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint))
    -> GHC.Integer.Type.Integer
    -> Main.Nint
    -> Main.Nint
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, Main.Nint, Main.Nint #)
  {- Arity: 5, Strictness: <L,C(U(U,U,U))><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
543e7030845064ef7829e7f43c0bbeec
  $wjudge ::
    GHC.Integer.Type.Integer
    -> Main.Nint
    -> Main.Nint
    -> (# GHC.Integer.Type.Integer, Main.Nint, Main.Nint #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Main.Nint)
                   (ww2 :: Main.Nint) ->
                 let {
                   newy :: Main.Nint = Main.next Main.judge6 Main.judge5 ww2
                 } in
                 let {
                   newx :: Main.Nint = Main.next Main.judge4 Main.judge3 ww1
                 } in
                 (# case GHC.Base.eqString
                           (Main.l16bits newx `cast` (Main.N:Nint[0]))
                           (Main.l16bits newy `cast` (Main.N:Nint[0])) of wild {
                      GHC.Types.False -> GHC.Integer.Type.plusInteger ww Main.judge2
                      GHC.Types.True -> GHC.Integer.Type.plusInteger ww Main.judge1 },
                    newx, newy #)) -}
9fc60fc45a69f5ad1b2477e8d7d56182
  $wrun2 ::
    GHC.Prim.Int#
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)) ->
                 case GHC.List.$witerate
                        @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                        Main.main4
                        w of ww1 { (#,#) ww2 ww3 ->
                 case GHC.List.$w!!
                        @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                        (GHC.Types.:
                           @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                           ww2
                           ww3)
                        ww of vx { (,,) ipv ipv1 ipv2 ->
                 ipv } }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
8c13cd8bb11227163f3bcbb2eeef71fc
  newtype Nint = Nint GHC.Integer.Type.Integer
8c13cd8bb11227163f3bcbb2eeef71fc
  axiom Main.Rep_Nint::
      GHC.Generics.Rep Main.Nint
        = GHC.Generics.D1
            ('GHC.Generics.MetaData "Nint" "Main" "main" 'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Nint" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
9fe76c6651a5b913b8dc99eb7a177ee2
  cstdiv :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2147483647) -}
daedfb86cdde13b7b2300b6f161ed6a6
  for ::
    Control.DeepSeq.NFData a =>
    (a -> a) -> a -> GHC.Integer.Type.Integer -> a
  {- Arity: 4, Strictness: <L,C(H)><L,C(U)><L,U><S,U> -}
ebbd5b27cdf4f80df522f7fc61d4367e
  for_$sfor ::
    ((GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
     -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint))
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
  {- Arity: 3, Strictness: <L,C(U(U,U,U))><S,1*U(U,U,U)><S,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                         -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint))
                   (w1 :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint))
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 case Main.$w$sfor w ww1 ww2 ww3 w2 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (ww5, ww6, ww7) } }) -}
9ca06b8184ca31d36c230ae5851de5d1
  fst3 :: (a, b, c) -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b @ c (ds :: (a, b, c)) ->
                 case ds of wild { (,,) a1 ds1 ds2 -> a1 }) -}
41678c7d91d1979284e3d0ddbc952356
  judge ::
    (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Main.$wjudge ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (ww5, ww6, ww7) } }) -}
967377c61cae1b62811cb4a8d02fe1d4
  judge1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
a5dc1a7d9383722cd9ed34b599282296
  judge2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
7fe665e32390ced3e79aed3ef22339e6
  judge3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
3b2c36e440f0418db488ef6eeb86d219
  judge4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (16807) -}
11fed23649f7c39538f3471d85ae837e
  judge5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8) -}
606ad161ef6a795d0531a73096886e1a
  judge6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (48271) -}
4669343ea817d8b26259aa063700439f
  l16bits :: GHC.Integer.Type.Integer -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer) ->
                 let {
                   str :: [GHC.Types.Char]
                   = Numeric.showIntAtBase
                       @ GHC.Integer.Type.Integer
                       GHC.Real.$fIntegralInteger
                       GHC.Show.$fShowInteger
                       Numeric.showHex1
                       GHC.Show.intToDigit
                       x
                       (GHC.Types.[] @ GHC.Types.Char)
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char str 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww2 4#) of wild {
                   GHC.Types.False
                   -> let {
                        n :: GHC.Prim.Int# = GHC.Prim.-# 4# ww2
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# 0# n) of wild1 {
                        GHC.Types.False -> str
                        GHC.Types.True
                        -> let {
                             lvl :: [GHC.Types.Char]
                             = GHC.Types.: @ GHC.Types.Char Main.l16bits1 str
                           } in
                           letrec {
                             $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
                               {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                             = \ (ww :: GHC.Prim.Int#) ->
                               case ww of ds1 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      Main.l16bits1
                                      ($wxs (GHC.Prim.-# ds1 1#))
                                 1# -> lvl }
                           } in
                           $wxs n }
                   GHC.Types.True
                   -> let {
                        n :: GHC.Prim.Int# = GHC.Prim.-# ww2 4#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# n 0#) of wild1 {
                        GHC.Types.False -> Main.$wunsafeDrop @ GHC.Types.Char n str
                        GHC.Types.True -> str } } }) -}
ddf21333599815cb5905781ad205df48
  l16bits1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '0'#) -}
524498fa542d1d1a84e8187d9d98dc67
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f754f32a7781f95ecae3cde180e4049c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
b7d4f005db7462133074967e672bde2d
  main2 :: GHC.Base.String
  {- Unfolding: (case GHC.List.$witerate
                        @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                        Main.main4
                        Main.main3 of ww { (#,#) ww1 ww2 ->
                 case GHC.List.$w!!
                        @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                        (GHC.Types.:
                           @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
                           ww1
                           ww2)
                        5000000# of vx { (,,) ipv ipv1 ipv2 ->
                 case GHC.Show.$w$cshowsPrec4
                        0#
                        ipv
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww3 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww5 } } }) -}
7ccf427d2eefce56d870b496efd543ac
  main3 :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
  {- Strictness: m,
     Unfolding: ((Main.judge2, Main.starta, Main.startb)) -}
0abc8a75ccc20a99a8ac80144952603f
  main4 ::
    (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
  {- Arity: 1, Strictness: <S(SSS),1*U(1*U,1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)) ->
                 case x of wild { (,,) x1 x2 x3 ->
                 case x1 of ds1 { DEFAULT ->
                 case x2 `cast` (Main.N:Nint[0]) of ds2 { DEFAULT ->
                 case x3 `cast` (Main.N:Nint[0]) of ds3 { DEFAULT ->
                 Main.judge wild } } } }) -}
a8a696132a6c8a6eabc5766f0a74cad6
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
b4b41ec66e5199b2714f1edbb5ca29a3
  next ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> Main.Nint -> Main.Nint
  {- Arity: 3, Strictness: <S,U><S,U><S,1*U> -}
2be9f99a842ee75198c520ccff5b7d9e
  nexta :: Main.Nint -> Main.Nint
  {- Arity: 1, Unfolding: (Main.next Main.judge4 Main.judge3) -}
f06c2cec4fce33486ec379bfbce466f0
  nextb :: Main.Nint -> Main.Nint
  {- Arity: 1, Unfolding: (Main.next Main.judge6 Main.judge5) -}
c4162c12074e6e8c676ccad56d068444
  run1 ::
    GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (times :: GHC.Integer.Type.Integer)
                   (start :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)) ->
                 case Main.for_$sfor
                        Main.judge
                        start
                        times of vx { (,,) ipv ipv1 ipv2 ->
                 ipv }) -}
6ec293d64c42929d89895fd8edc3421c
  run2 ::
    GHC.Types.Int
    -> (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wrun2 ww1 w1 }) -}
0f11d34cee0d354c8995c38b56bb819b
  starta :: Main.Nint
  {- Unfolding: (Main.next
                   Main.judge4
                   Main.judge3
                   Main.starta1 `cast` (Sym (Main.N:Nint[0]))) -}
0f2a79a99839b382b4390d2b4261403e
  starta1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (703) -}
c50bfd6880fbc40882e1619a1a2dab85
  startb :: Main.Nint
  {- Unfolding: (Main.next
                   Main.judge6
                   Main.judge5
                   Main.startb1 `cast` (Sym (Main.N:Nint[0]))) -}
a7ff0af1bede71a40ddd4200dbc2df56
  startb1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (516) -}
62b4095d06d96fcda7fed0f4932af3ee
  test :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.test1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
0dd02dfa755526ea6d1594c8bf0ff9e3
  test1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.test2
                   GHC.Types.True) -}
9dc3c3f9f50846ad0d24bb8f16ac9878
  test2 :: GHC.Base.String
  {- Unfolding: (case Main.$w$sfor
                        Main.judge
                        Main.judge2
                        Main.testa
                        Main.testb
                        Main.test3 of ww { (#,,#) ww1 ww2 ww3 ->
                 case GHC.Show.$w$cshowsPrec4
                        0#
                        ww1
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) -}
f2f02c09389c5b533dca717ce75eebad
  test3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1057) -}
7a03e72469c0fe9d0afd94ce37e9a75b
  testa :: Main.Nint
  {- Unfolding: (Main.next
                   Main.judge4
                   Main.judge3
                   Main.testa1 `cast` (Sym (Main.N:Nint[0]))) -}
bd466b4487dcce5a26255e54289c5544
  testa1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (65) -}
dff33518f7a549a8fef5b8f880c8ac23
  testb :: Main.Nint
  {- Unfolding: (Main.next
                   Main.judge4
                   Main.judge3
                   Main.testb1 `cast` (Sym (Main.N:Nint[0]))) -}
b40f50470bf7843c8212a7ff9955d3c9
  testb1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8921) -}
instance [safe] GHC.Classes.Eq [Main.Nint] = Main.$fEqNint
instance [safe] GHC.Generics.Generic [Main.Nint]
  = Main.$fGenericNint
instance [safe] Control.DeepSeq.NFData [Main.Nint]
  = Main.$fNFDataNint
instance [safe] GHC.Classes.Ord [Main.Nint] = Main.$fOrdNint
instance [safe] GHC.Show.Show [Main.Nint] = Main.$fShowNint
family instance GHC.Generics.Rep [Main.Nint] = Main.Rep_Nint
"SPEC for @ (Integer, Nint, Nint)" forall ($dNFData :: Control.DeepSeq.NFData
                                                         (GHC.Integer.Type.Integer, Main.Nint,
                                                          Main.Nint))
  Main.for @ (GHC.Integer.Type.Integer, Main.Nint, Main.Nint)
           $dNFData
  = Main.for_$sfor
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

